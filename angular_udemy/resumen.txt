ANGULAR UDEMY

Clase 1.  Instalación del proyecto
1. Se crea una carpeta vacia.  DEntro de esa carpeta se ejecuta el comando para instalar angular cli.  npm install -g @angular/cli
2. Para crear un nuevo proyecto, se ejecuta:  ng new nombre_proyecto.
3. se ingresa a la carpeta del proyecto creado y se ejeucta ng serve --o   para verificar que todo cargue bien.

Clase 2.  Configuracion de Bootstrap.
1. Instalar bootstrap.   npm install bootstrap.
2. En la instalación se creo la carpeta bootstrap dentro de la carpeta node_modules.
3. Configurar el archivo angular.json --> seccion architect - build - styles y adicionar "node_modules/bootstrap/dist/css/bootstrap.min.css"
4. Se ejecuta nuevamemente ng serve --o.  El estilo de Hola mundo!!! debió cambiar.
5. Para hacer otra prueba se puede adicionar un componente visual, tal como un boton.

Clase 3. Creación de componente, modelos y servicio.
1. Para crear un componente.  ng g c nombre_componente.
2. Para crear un servicio. ng g s producto.
3. Para crear el modelo.  Se realiza a mano.
	crear archivo nombre_modelo.ts
	Crear la estructura interna del modelo. DEfinir los atributos y crear un constructor con todos los campos.
	
Clase 4.  Routing.
1.	Se configura el archivo app-routing.module.ts.  si no está creado, se crea manualmente. 
	Se púede ejecutar el comando ng generate module app-routing --flat --module=app
	Aqui se configuran todas la rutas del proyecto.
	const routes: Routes = [
		{ path: '', component: ListarProductosComponent },
		{ path: 'crear-producto', component: CrearProductoComponent },
		{ path: 'editar-producto/:id', component : CrearProductoComponent },
		{ path: '**', redirectTo: '', pathMatch: 'full' }
	];
2.	Se debe importar en el archivo app.module.ts para que funcione correctamente.
	import { AppRoutingModule } from './app-routing.module';
	imports: [
        BrowserModule, AppRoutingModule
    ],

Clase 5. Listar producto HTML.
	OBSERVACION: Si se desea colocar un gradiente al portal, puede dirigirse a https://uigradients.com/ y seleccionar el deseado.  
	Luego debe editar el archivo general style.css y dentro del body: {} pegar el css obtenido en la pagina de gradientes.


Clase 6. Configuracion Google Fonts y FontAwesome.

Clase 7. Crear Producto HTML.

clase 8. Crear producto. Formulario reactivo.

Clase 11. Creacion del Backend.  Instalación de paquetes.
	Para tener separado el front del backend, se crea una carpeta llamada [servidor].
	Ubicarse dentro de la carpeta y ejecutar el comando npm init.
	PREGUNTAS: nombre_servidor, version, descripcion, author y yes.
	Instalar dependencias.
		npm install -D nodemon
		npm install express mongoose dotenv
		
	En el archivo package.json se puede visualizar la configuración realizada con la ejecución de npm init.
		
CLase 12. Configuracion nodemon.
	crear archivo index.js en la raiz de la carpeta servidor.
	Se crea const app = express();
	
	Se configura el archivo package.json, en la sección scripts se elimina lo que hay y se coloca "dev": "nodemon ."
	Esto se usa para que nodemon se ejecute cuando se arranque el servidor.
	Se ejecuta el comando npm run dev   Para arrancar el servidor.
	
	Para verificar que está escuchando correctamente se puede abrir en un navegador la url localhost:4000.
	Para verificar el uso de un consumo, se puede crear un servicio básico para que responda a las peticiones genéricas:
		app.get('/', (req, res) => {
			res.send('Hola Mundo!!')
		});
	
Clase 13.  Configurando el servidor.

Clase 14. Configurando MongoDB Atlas y Mongo Compass.
	Ingresando a la página de Mongo.
	Registrarse, acceder, crear BD, Crear usuario(s).
	Descargar compass para conectarse a través del SO.
	
Clase 15. Conexion a BD.
	
clase 16. Configuracion de Routes.
	Crear carpeta routes.
	crear archivos productos.js
	
	
clase 17. Controlador Producto.
	
	
clase 18. Enviamos datos a la API.
	Usando Postman, se hace la petición al servicio enviando datos a través del body, seleccionando raw y formato JSON.
	{
		"producto": "Coca Cola",
		"categoria": "Bebidas",
		"ubicacion": "Madrid",
		"precio": 12345
	}
	AL recibir los datos estos no llegaran formateados por lo que se obtendrá como respuesta, un undefined.
	Para solucionar este inconveniente, debe adicionar app.use(express.json()) en el archivo index.js.
	
Clase 19. Definición del modelo con mongoose.
	
	


	
	